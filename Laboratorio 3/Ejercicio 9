/*Natalia Alexandra Solorzano Paz 00120319 Laboratorio 3*/
/*Ejercicio 9*/
/*Escriba un programa que muestre un menu que permita administrar una lista lineal simple con datos sobre personas. 
 * Debera desplegar un menu con las siguientes opciones
 * a) Llenar la lista
 * b) Eliminar una persona
 * c) Actualizar los datos de una persona
 * d) Mostrar todas las personas
 * e) Salir
 * Para cada persona debera tomar en cuenta los siguientes datos: carnet, nombre, apellido, 
 * edad, numero de telefono y correo electronico */

#include <iostream>
#include <string>
using namespace std;



struct LPersona{
    int carnet;
    string nombre;
    string apellido;
    int edad;
    int numeroDeTelefono;
    string correoElectronico;
    
};
typedef struct LPersona Persona;

Persona solicitarInformacion(){
    Persona p;
    

    cout << "Carnet: "; cin >> p.carnet;
    cin.ignore();
    cout << "Nombre: "; getline(cin, p.nombre);
    cout << "Apellido: "; getline(cin, p.apellido);
    cout << "Edad:  "<<endl;
    cin>> p.edad;
    
    cout << "Numero de Telefono:  "<<endl;
    cin>> p.numeroDeTelefono;
   cin.ignore();
    cout << "Correo Electronico:  " << endl;
    getline(cin, p.correoElectronico);
     
    

    return p;
}

void mostrarPersona(Persona p){
    cout<< " Carnet: " << p.carnet << endl;
    cout << "Nombre: " << p.nombre << endl;
    cout << "Apellido: " << p.apellido << endl;
    cout << " Edad: " << p.edad << endl;
    cout << " Numero de Telefono:"<< p.numeroDeTelefono << endl;
    cout << " Correo Electronico: " << p.correoElectronico << endl;
    
    
    cout << endl;
}

struct TNodo{
    Persona dato;
    
    struct TNodo *sig;
};
typedef struct TNodo Nodo;
Nodo *pInicio;

void insertarInicio(Persona p) {

    Nodo *nuevo = new Nodo;
    nuevo->dato = p;
    nuevo->sig = pInicio;
    
    pInicio = nuevo;
}

void insertarFinal (Persona p) {

    Nodo *nuevo = new Nodo;
    nuevo->dato = p;
    nuevo->sig = NULL;
    
    if (pInicio == NULL) {
        pInicio = nuevo;
    } else {
        Nodo *p = pInicio;
        Nodo *q = NULL;
        while (p != NULL) {
            q = p;
            p = p->sig;
        }
        q->sig = nuevo;
    }
}

void insertarDespuesDe(Persona p) {
    int unCarnet = 0;
    cout << " Carnet de la persona de referencia: ";
    cin >> unCarnet;

       
    Nodo *s = pInicio;
    
    while(s != NULL && (s->dato).carnet != unCarnet)
  
        s = s->sig;
    if(s == NULL){
        cout << " La persona de referencia NO existe" << endl;
        
        return;
    }
    
    Nodo *nuevo = new Nodo;
    nuevo->dato = p;
    nuevo->sig = s->sig;
    
    s->sig = nuevo;
    cout << " La informacion de la persona ha sido ingresada exitosamente" << endl;
    
}

void insertarAntesDe(Persona p) {
    int unCarnet = 0;
    cout << " Carnet de la persona de referencia: ";
    cin >> unCarnet;

        
    Nodo *s = pInicio, *q = NULL;
    
    while(s != NULL && (s->dato).carnet != unCarnet){
   
        q = s;
        s = s->sig;
    }
    if(s == NULL){
        cout << "Persona de referencia NO existe" << endl;
        
        return;
    }
    
    Nodo *nuevo = new Nodo;
    nuevo->dato = p;
    nuevo->sig = s;
    
    if(q == NULL)
        pInicio = nuevo;
    else
        q->sig = nuevo;
    cout << "Persona ingresada con exito" <<endl;
 
}
void agregarPersona(){

    Persona p = solicitarInformacion();

    bool continuar = true;
    do{
        int opcion = 0;
        
        cout << "\t1) Al principio\n\t2) Al final"
            << "\n\t3) Despues de\n\t4) Antes de"
            << "\n\tOpcion elegida: ";
        cin >> opcion;
        switch(opcion){
            case 1: insertarInicio(p);  continuar = false;
            break;
            case 2: insertarFinal(p);   continuar = false;
            break;
            case 3: insertarDespuesDe(p);   continuar = false;
            break;
            case 4: insertarAntesDe(p);   continuar = false;
            break;
            default: cout << "Opcion erronea!" << endl;
            break;
        }
    }while(continuar);
}

void mostrarLista() {
    Nodo *s = pInicio;

    while (s != NULL) {
        mostrarPersona(s->dato);
        
        s = s->sig;
    }
}

void eliminarPersona(){
    int unCarnet = 0;
    cout << "Carnet de la persona a eliminar: ";
    cin >> unCarnet;

    
    Nodo *p = pInicio, *q = NULL;
    
    while(p != NULL && (p->dato).carnet != unCarnet){
    
        q = p;
        p = p->sig;
    }
    if(p == NULL){
        cout << "Persona a borrar NO existe" << endl;
     
        return;
    }
    if(q == NULL)
        pInicio = p->sig;
    else
        q->sig = p->sig;
    delete(p);
    cout << "Persona borrado!" << endl;
   
}

bool buscarPersona(){
    int unCarnet = 0;
    cout << "Carnet de libro a buscar: ";
    cin >> unCarnet;

    
    Nodo *s = pInicio;

    while(s != NULL && (s->dato).carnet != unCarnet)
    
        s = s->sig;
    
    
    return (s != NULL);
}

int main(){
    cout << "Inicializando..." << endl;
    pInicio = NULL;
    
    bool continuar = true;
    do{
        int opcion = 0;
        cout << "Menu: \n\t1) Agregar Persona\n\t2) Ver Personas"
             << " \n\t3) Eliminar Personas\n\t4) Buscar Persona"
            << "\n\t5) Salir\n\tOpcion elegida: ";Lab3Ejercicio9.cpp
                
        
        cin >> opcion;
        switch(opcion){
            case 1: cout << "Agregando..." << endl;
           
            solicitarInformacion();
    
                      
            break;
            case 2: cout << "Listando..." << endl;
                mostrarLista();
            break;
            case 3: cout << "Eliminando..." << endl;
            eliminarPersona();
               
            break;
            case 4: cout << "Buscando..." << endl;
            if(buscarPersona())
                cout << " La Persona SI se encuentra" << endl;
                          
                else
                    cout << " La persona NO se encuentra" << endl;
            
            break;
            case 5: continuar = false;
            break;
            default: cout << "Opcion erronea!" << endl;
            break;
        }
    }while(continuar);

    return 0;
}
