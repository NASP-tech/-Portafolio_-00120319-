/*El problema de las ocho reinas.Consiste en colocar ocho reinas en un tablero de
ajedrez, de tal manera que ninguna de ellas ataque a otra.Su programa debe ir
colocando las reinas sucesivamente por filas, hasta completarlas todas.Si en una fila
no puede ser colocada una reina, el programa da vuelta atrás y rehace la, o las, filas
precedentes, por medio del mecanismo recursivo de retorno.Luego, continúa hacia
adelante.Una solución a este problema, se ve de la siguiente manera :
b) La vuelta del caballo.Consiste en colocar inicialmente la pieza del caballo en una
casilla de un tablero de ajedrez.Luego el caballo debe realizar movimientos para
visitar todos los cuadros del tablero, por medio de un mecanismo recursivo, pasando
por cada cuadro solo una vez.Si en algún momento el caballo se encuentra
imposibilitado de realizar el siguiente movimiento, regresa sobre sus pasos,
deshaciendo movimientos, mediante el mecanismo recursivo de retorno.Al final,
imprima la secuencia de casillas visitadas que resuelve el problema.
c) El problema de las torres de Hanói.Consiste en mover una torre de discos, de
una aguja hacia otra, nada más con la ayuda de una aguja auxiliar.La torre consiste
de n discos de diferente tamaño, que van colocados uno sobre otro, iniciando en la
base con el más grande y terminando en la parte superior con el más pequeño.Solo
puede moverse un disco a la vez y en ningún momento un disco puede estar sobre
otro más pequeño que él.Un ejemplo de la solución puede verlo en el siguiente
enlace : https://www.youtube.com/watch?v=T-LL2YlmcCs.*/



//Juego A
/*#include <iostream>
using namespace::std;

#include <ctime>
#include <cstdlib>

const int Tamano_Arreglo = 8;
int x = 0;
int y = 0;

int accesibilidad = 100;

int Determina_Minimo(int Arreglo[][Tamano_Arreglo], int lado)
{              

	int minimo = 30;   

	for (int i = 0; i < lado; i++)
		for (int j = 0; j < lado; j++)
		{            // Abre for
			if (Arreglo[i][j] < minimo)
				minimo = Arreglo[i][j];
			
		}         

	return minimo;
}            

void Marca_Minimos(int menor, int Arreglo_Valores[][Tamano_Arreglo], int Arreglo_Tablero[][Tamano_Arreglo])

{         
	for (int i = 0; i < Tamano_Arreglo; i++)
		for (int j = 0; j < Tamano_Arreglo; j++)
		{        
			if (Arreglo_Valores[i][j] == menor)
				Arreglo_Tablero[i][j] = 'a';

			
		}   
}          


int Determina_Posicion(int Tabla[][Tamano_Arreglo], int contador_reinas)
{        

 	int contador = 0;

	for (int i = 0; i < Tamano_Arreglo; i++)
		for (int j = 0; j < Tamano_Arreglo; j++)
		{         
			if ('a' == Tabla[i][j])
			{     
				contador++;
			}    
		}        

	if (0 != contador)

	{          
			   
		int dado;
		srand(time(NULL));  
		dado = 1 + rand() % contador;

		
		int s = 0;  

		for (int i = 0; i < Tamano_Arreglo; i++)
			for (int j = 0; j < Tamano_Arreglo; j++)
			{ 
				if ('a' == Tabla[i][j])
				{
					s++;
					if (s == dado)
						
					{  
						Tabla[i][j] = contador_reinas;
						y = i;   
						x = j;   
					}   
				}
			}  

		for (int i = 0; i < Tamano_Arreglo; i++)
			for (int j = 0; j < Tamano_Arreglo; j++)
			{ 
				if ('a' == Tabla[i][j])
					Tabla[i][j] = 0;
			}    

	}        

	return contador;
}          

void Modifica_Valores(int Arreglo_Valores[][Tamano_Arreglo])

{  

	Arreglo_Valores[y][x] = accesibilidad;
	

	for (int i = 0; i < Tamano_Arreglo; i++)
		Arreglo_Valores[y][i] = accesibilidad;
	
	for (int j = 0; j < Tamano_Arreglo; j++)
		Arreglo_Valores[j][x] = accesibilidad;
	
	int s;
	int t;
	s = x;
	t = y;
	while ((s < Tamano_Arreglo) && (t < Tamano_Arreglo))
		Arreglo_Valores[t++][s++] = accesibilidad;

	s = x;
	t = y;

	while ((s >= 0) && (t >= 0))
		Arreglo_Valores[t--][s--] = accesibilidad;

	s = x;
	t = y;

	while ((t >= 0) && (s < Tamano_Arreglo))
		Arreglo_Valores[t--][s++] = accesibilidad;

	s = x;
	t = y;

	while ((t < Tamano_Arreglo) && (s >= 0))
		Arreglo_Valores[t++][s--] = accesibilidad;

	
}  

void Imprimir(int B[][Tamano_Arreglo], int lado)

{                           
	for (int k = 0; k < lado; k++)
	{
		for (int l = 0; l < lado; l++)
			cout << "\t " << B[k][l];
		cout << endl << endl;
	}

	cout << endl << endl;
}


int main()

{           

	int Valores[Tamano_Arreglo][Tamano_Arreglo] =

	{ {22, 22, 22, 22, 22, 22, 22, 22},
	  {22, 24, 24, 24, 24, 24, 24, 22},
	  {22, 24, 26, 26, 26, 26, 24, 22},
	  {22, 24, 26, 28, 28, 26, 24, 22},
	  {22, 24, 26, 28, 28, 26, 24, 22},
	  {22, 24, 26, 26, 26, 26, 24, 22},
	  {22, 24, 24, 24, 24, 24, 24, 22},
	  {22, 22, 22, 22, 22, 22, 22, 22}

	};


	int Tablero[Tamano_Arreglo][Tamano_Arreglo] = { {0},{0} };
	// En este arreglo se escribira el lugar donde estan las reinas

	int minimo;
	int numero_reina = 1;
	int casillas_disponibles = Tamano_Arreglo * Tamano_Arreglo;

	while ((0 != casillas_disponibles))
	{      
		minimo = Determina_Minimo(Valores, Tamano_Arreglo);

		
		Marca_Minimos(minimo, Valores, Tablero);
			
		casillas_disponibles = Determina_Posicion(Tablero, numero_reina);

		Modifica_Valores(Valores);

		numero_reina++;
	}    

	(Tamano_Arreglo == numero_reina - 2) ? cout << "\nAQUI ESTAN LAS OCHO REINAS!" << endl : cout << "\nLo siento, solo se pudo colocar: " << numero_reina - 2 << " reinas. Intente de nuevo." << endl;
	Imprimir(Tablero, Tamano_Arreglo);

	return 0;
}            */



//Juego B
#define N 5
#define M 5

int mat[N][M] = { 0 };

int main() {

	moverCaballo(0, 0, 1);
	imprimirMatriz();

	system("pause");
	return 0;
}


bool moverCaballo(int x, int y, int cont) {

	bool listo = false;

	mat[x][y] = cont;

	if (cont == N * N) {
		return true;
	}

	if (!listo && verificarCasilla(x + 2, y + 1)) {
		listo = moverCaballo(x + 2, y + 1, ++cont);
	}

	bool verificarCasilla(int x, int y) {
		if (mat[x][y] != 0) {
			return false;
		}
		else if (x >= N || y >= M || x < 0 || y < 0) {
			return false;
		}
		return true;
	}



	//Juego C

# include <iostream>

	using namespace::std;

	
	void Mover_Torres(int N, int Origen, int Intermedio, int Destino)

	{ 

		if (N > 1)

		{ 
			Mover_Torres(N - 1, Origen, Destino, Intermedio);

		
			cout << "\nMueve el disco " << N << " de " << Origen << " a " << Destino << endl;
			Mover_Torres(N - 1, Intermedio, Origen, Destino);
		} 

		if (1 == N)
			cout << "\nMueve el disco 1 de " << Origen << " a " << Destino << endl;

	} 

	int main()

	{ 
		int Discos;
		cout << "\nEste programa resuelve el problema clasico de las Torres de Hanoi";
		cout << " mediante la recursion." << endl;
		cout << "\nPor favor introduzca el numero de discos que quiere mover ";
		cout << " de la pila 1 a la pila 3" << endl;
		cin >> Discos;

		Mover_Torres(Discos, 1, 2, 3);

		cout << endl << endl;

		return 0;

	} 
